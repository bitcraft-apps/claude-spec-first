name: Changelog Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'framework/VERSION'
      - 'CHANGELOG.md'
      - '.github/workflows/changelog-validation.yml'

jobs:
  changelog-validation:
    name: Validate Changelog Requirements
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for git operations
    
    - name: Check if version was bumped
      id: version-check
      run: |
        echo "üîç Checking for version changes..."
        
        # Get the base branch version
        BASE_VERSION=$(git show origin/main:framework/VERSION 2>/dev/null || echo "0.0.0")
        
        # Get the PR version  
        git checkout HEAD -- framework/VERSION
        PR_VERSION=$(cat framework/VERSION 2>/dev/null || echo "0.0.0")
        
        echo "Base version: $BASE_VERSION"
        echo "PR version: $PR_VERSION"
        
        # Check if version changed
        if [ "$BASE_VERSION" != "$PR_VERSION" ]; then
          echo "‚úÖ Version bump detected: $BASE_VERSION ‚Üí $PR_VERSION"
          echo "version_bumped=true" >> $GITHUB_OUTPUT
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "pr_version=$PR_VERSION" >> $GITHUB_OUTPUT
        else
          echo "‚ÑπÔ∏è No version change detected"
          echo "version_bumped=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate changelog when version bumped
      if: steps.version-check.outputs.version_bumped == 'true'
      run: |
        echo "üìã Validating changelog requirements for version bump..."
        
        PR_VERSION="${{ steps.version-check.outputs.pr_version }}"
        
        # Check if CHANGELOG.md exists
        if [ ! -f "CHANGELOG.md" ]; then
          echo "‚ùå ERROR: CHANGELOG.md is required when version is bumped"
          echo "Expected: CHANGELOG.md file should exist"
          echo "Actual: CHANGELOG.md file is missing"
          echo ""
          echo "To fix this issue:"
          echo "1. Create a CHANGELOG.md file following Keep a Changelog format"
          echo "2. Document your changes for version $PR_VERSION"
          echo "3. Commit the CHANGELOG.md to your PR"
          exit 1
        fi
        
        echo "‚úÖ CHANGELOG.md exists"
        
        # Validate changelog format structure
        echo "üîç Validating changelog format..."
        
        format_errors=()
        
        # Check for title
        if ! grep -q "# Changelog" CHANGELOG.md; then
          format_errors+=("missing-title")
        fi
        
        # Check for version headers with links
        if ! grep -q "## \[" CHANGELOG.md; then
          format_errors+=("missing-version-links")
        fi
        
        # Check for Unreleased section
        if ! grep -q "\[Unreleased\]" CHANGELOG.md; then
          format_errors+=("missing-unreleased-section")
        fi
        
        # Check for comparison links at bottom
        if ! grep -q "\[Unreleased\]:" CHANGELOG.md; then
          format_errors+=("missing-comparison-links")
        fi
        
        # Check for the new version in changelog
        if ! grep -q "## \[${PR_VERSION}\]" CHANGELOG.md; then
          format_errors+=("missing-new-version")
        fi
        
        if [ ${#format_errors[@]} -ne 0 ]; then
          echo "‚ùå ERROR: Changelog format validation failed"
          echo "Format issues detected:"
          for err in "${format_errors[@]}"; do
            echo "- $err"
          done
          echo ""
          echo "Expected changelog format (Keep a Changelog):"
          echo "- Must have '# Changelog' title"
          echo "- Must have '## [Unreleased]' section"
          echo "- Must have '## [$PR_VERSION] - YYYY-MM-DD' for new version"
          echo "- Must have version comparison links at bottom"
          echo ""
          echo "To fix this issue:"
          echo "1. Update CHANGELOG.md to follow Keep a Changelog format"
          echo "2. Verify the format matches Keep a Changelog standards"
          echo "3. Commit the updated CHANGELOG.md to your PR"
          exit 1
        fi
        
        echo "‚úÖ Changelog format validation passed"

    - name: Validate changelog content quality
      if: steps.version-check.outputs.version_bumped == 'true'
      run: |
        echo "üîç Validating changelog content quality..."
        
        PR_VERSION="${{ steps.version-check.outputs.pr_version }}"
        
        content_warnings=""
        
        # Check if the new version has actual content
        if ! grep -A 20 "## \[${PR_VERSION}\]" CHANGELOG.md | grep -q "###"; then
          content_warnings="$content_warnings no-categories-for-new-version"
        fi
        
        # Check for reasonable change categories
        categories_found=0
        for category in "Added" "Changed" "Deprecated" "Removed" "Fixed" "Security"; do
          if grep -A 20 "## \[${PR_VERSION}\]" CHANGELOG.md | grep -q "### $category"; then
            categories_found=$((categories_found + 1))
          fi
        done
        
        if [ $categories_found -eq 0 ]; then
          content_warnings="$content_warnings no-changes-documented"
        fi
        
        if [ -n "$content_warnings" ]; then
          echo "‚ö†Ô∏è  WARNING: Changelog content quality issues detected:"
          for warning in $content_warnings; do
            echo "- $warning"
          done
          echo ""
          echo "Recommendations:"
          echo "- Document actual changes for version $PR_VERSION"
          echo "- Use standard categories: Added, Changed, Fixed, etc."
          echo "- Provide meaningful descriptions of changes"
          echo ""
          echo "Note: This is a warning, not a failure. Please review the changelog content."
        else
          echo "‚úÖ Changelog content quality validation passed"
        fi

    - name: Validate manual changelog process
      run: |
        echo "üìã Validating manual changelog maintenance approach..."
        echo "‚úÖ Manual changelog process - no automation required"
        echo "‚ÑπÔ∏è  Developers are expected to manually update CHANGELOG.md during PR development"

    - name: Summary
      if: always()
      run: |
        echo ""
        echo "üéØ Changelog Validation Summary"
        echo "================================"
        
        if [ "${{ steps.version-check.outputs.version_bumped }}" = "true" ]; then
          echo "üì¶ Version Change: ${{ steps.version-check.outputs.base_version }} ‚Üí ${{ steps.version-check.outputs.pr_version }}"
          echo "üìã Changelog Requirements: ENFORCED"
          echo ""
          echo "‚úÖ All changelog validation checks completed"
          echo ""
          echo "Next steps after PR approval:"
          echo "1. Changelog will be automatically included in release"
          echo "2. Version tags will reference changelog entries"
          echo "3. Release notes will be generated from changelog"
        else
          echo "üì¶ Version Change: NONE"
          echo "üìã Changelog Requirements: SKIPPED (no version bump)"
          echo ""
          echo "‚ÑπÔ∏è  Changelog validation only runs when framework/VERSION changes"
        fi
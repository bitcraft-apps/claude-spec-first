name: Release Preparation

on:
  push:
    branches: [ main ]
    paths:
      - 'framework/VERSION'
      - 'CHANGELOG.md'
  pull_request:
    branches: [ main ]
    paths:
      - 'framework/VERSION'
      - 'CHANGELOG.md'

jobs:
  version-validation:
    name: Version and Changelog Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect version changes
      id: version-check
      run: |
        echo "üîç Checking for version changes..."
        
        # Get the base branch version
        BASE_VERSION=$(git show origin/main:framework/VERSION 2>/dev/null || echo "0.0.0")
        
        # Get the current version  
        CURRENT_VERSION=$(cat framework/VERSION 2>/dev/null || echo "0.0.0")
        
        echo "Base version: $BASE_VERSION"
        echo "Current version: $CURRENT_VERSION"
        
        if [ "$BASE_VERSION" != "$CURRENT_VERSION" ]; then
          echo "‚úÖ Version bump detected: $BASE_VERSION ‚Üí $CURRENT_VERSION"
          echo "version_bumped=true" >> $GITHUB_OUTPUT
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "‚ÑπÔ∏è No version change detected"
          echo "version_bumped=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate changelog requirements
      if: steps.version-check.outputs.version_bumped == 'true'
      run: |
        echo "üìã Validating changelog requirements for version bump..."
        
        CURRENT_VERSION="${{ steps.version-check.outputs.current_version }}"
        
        # Check if CHANGELOG.md exists
        if [ ! -f "CHANGELOG.md" ]; then
          echo "‚ùå ERROR: CHANGELOG.md is required when version is bumped"
          echo "To fix: Create CHANGELOG.md following Keep a Changelog format"
          exit 1
        fi
        
        echo "‚úÖ CHANGELOG.md exists"
        
        # Validate changelog format structure
        echo "üîç Validating changelog format..."
        
        format_errors=()
        
        # Check for title
        if ! grep -q "# Changelog" CHANGELOG.md; then
          format_errors+=("missing-title")
        fi
        
        # Check for version headers
        if ! grep -q "## \[" CHANGELOG.md; then
          format_errors+=("missing-version-headers")
        fi
        
        # Check for the new version in changelog
        if ! grep -q "## \[${CURRENT_VERSION}\]" CHANGELOG.md; then
          format_errors+=("missing-current-version")
        fi
        
        if [ ${#format_errors[@]} -ne 0 ]; then
          echo "‚ùå ERROR: Changelog format validation failed"
          echo "Issues: ${format_errors[@]}"
          echo "Required: Version $CURRENT_VERSION must be documented in CHANGELOG.md"
          exit 1
        fi
        
        echo "‚úÖ Changelog format validation passed"

    - name: Validate changelog content quality
      if: steps.version-check.outputs.version_bumped == 'true'
      run: |
        echo "üîç Validating changelog content quality..."
        
        CURRENT_VERSION="${{ steps.version-check.outputs.current_version }}"
        
        # Check if the new version has actual content
        if ! grep -A 20 "## \[${CURRENT_VERSION}\]" CHANGELOG.md | grep -q "###"; then
          echo "‚ö†Ô∏è  WARNING: No change categories found for version $CURRENT_VERSION"
          echo "Consider adding: ### Added, ### Changed, ### Fixed, etc."
        else
          echo "‚úÖ Changelog content quality validation passed"
        fi

    - name: Semantic version validation  
      if: steps.version-check.outputs.version_bumped == 'true'
      run: |
        echo "üîç Validating semantic versioning..."
        
        BASE_VERSION="${{ steps.version-check.outputs.base_version }}"
        CURRENT_VERSION="${{ steps.version-check.outputs.current_version }}"
        
        # Use the project's version utilities for validation
        chmod +x scripts/version.sh
        
        # Validate both versions are semantic
        ./scripts/version.sh validate "$BASE_VERSION" || {
          echo "‚ùå ERROR: Invalid base version format: $BASE_VERSION"
          exit 1
        }
        
        ./scripts/version.sh validate "$CURRENT_VERSION" || {
          echo "‚ùå ERROR: Invalid current version format: $CURRENT_VERSION"
          exit 1
        }
        
        # Check version progression
        comparison=$(./scripts/version.sh compare "$BASE_VERSION" "$CURRENT_VERSION")
        
        if [[ "$comparison" != *"<"* ]]; then
          echo "‚ùå ERROR: Version must increment from $BASE_VERSION to $CURRENT_VERSION"
          echo "Current relationship: $comparison"
          exit 1
        fi
        
        echo "‚úÖ Semantic version validation passed"
        echo "Version progression: $BASE_VERSION ‚Üí $CURRENT_VERSION"

  release-readiness:
    name: Release Readiness Check
    runs-on: ubuntu-latest
    needs: version-validation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Initialize test environment
      run: |
        git submodule update --init --recursive
        chmod +x tests/run-tests.sh
        chmod +x tests/bats-core/bin/bats
        chmod +x scripts/version.sh
        chmod +x framework/validate-framework.sh
    
    - name: Run comprehensive test suite
      run: |
        echo "üß™ Running comprehensive test suite for release validation..."
        cd tests
        ./run-tests.sh --tap
    
    - name: Validate framework integrity
      run: |
        echo "üîç Validating framework integrity for release..."
        ./framework/validate-framework.sh
    
    - name: Test installation process
      run: |
        echo "üì¶ Testing installation process for release..."
        export HOME="/tmp/release-test-home"
        mkdir -p "$HOME/.claude"
        
        ./scripts/install.sh
        
        cd "$HOME/.claude"
        ./validate-framework.sh
        
        echo "‚úÖ Installation process validated for release"

    - name: Generate release summary
      run: |
        echo "## Release Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Framework Version**: $(cat framework/VERSION)" >> $GITHUB_STEP_SUMMARY
        echo "**Test Suite**: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "**Framework Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "**Installation Test**: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "**Ready for Release**: ‚úÖ" >> $GITHUB_STEP_SUMMARY
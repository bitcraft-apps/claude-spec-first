name: Pull Request Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'framework/**'
      - 'scripts/**' 
      - 'tests/**'
      - '.github/workflows/pull-request.yml'

jobs:
  tests:
    name: Test Suite (${{ matrix.test-suite }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite:
          - unit
          - integration
          - e2e
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Setup test environment
      run: |
        echo "Setting up test environment..."
        echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        echo "PROJECT_ROOT=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        
        # Ensure submodules are properly initialized
        git submodule update --init --recursive
        
        # Make scripts executable
        chmod +x tests/run-tests.sh
        chmod +x tests/bats-core/bin/bats
        chmod +x scripts/version.sh
        chmod +x framework/validate-framework.sh
    
    - name: Run test suite
      run: |
        echo "Running test suite: ${{ matrix.test-suite }}"
        cd tests
        ./run-tests.sh --verbose --tap --${{ matrix.test-suite }}
    
    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results for ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Runner**: Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY

  framework-validation:
    name: Framework Validation
    runs-on: ubuntu-latest
    needs: tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate framework structure
      run: |
        echo "üîç Validating framework structure..."
        chmod +x framework/validate-framework.sh
        ./framework/validate-framework.sh
    
    - name: Verify installation scripts
      run: |
        echo "üìã Verifying installation scripts..."
        
        # Check script existence and permissions
        for script in install.sh update.sh uninstall.sh; do
          if [ -f "scripts/$script" ]; then
            echo "‚úÖ scripts/$script exists"
          else
            echo "‚ùå scripts/$script missing"
            exit 1
          fi
          
          if [ -x "scripts/$script" ]; then
            echo "‚úÖ scripts/$script is executable"
          else
            echo "‚ùå scripts/$script not executable"  
            exit 1
          fi
        done
        
        echo "‚úÖ All installation scripts validated"

  changelog-check:
    name: Changelog Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check version changes
      id: version-check
      run: |
        echo "üîç Checking for version changes..."
        
        # Get the base branch version
        BASE_VERSION=$(git show origin/main:framework/VERSION 2>/dev/null || echo "0.0.0")
        
        # Get the PR version  
        git checkout HEAD -- framework/VERSION
        PR_VERSION=$(cat framework/VERSION 2>/dev/null || echo "0.0.0")
        
        echo "Base version: $BASE_VERSION"
        echo "PR version: $PR_VERSION"
        
        if [ "$BASE_VERSION" != "$PR_VERSION" ]; then
          echo "‚úÖ Version bump detected: $BASE_VERSION ‚Üí $PR_VERSION"
          echo "version_bumped=true" >> $GITHUB_OUTPUT
          echo "pr_version=$PR_VERSION" >> $GITHUB_OUTPUT
        else
          echo "‚ÑπÔ∏è No version change detected"
          echo "version_bumped=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate changelog requirements
      if: steps.version-check.outputs.version_bumped == 'true'
      run: |
        echo "üìã Validating changelog for version ${{ steps.version-check.outputs.pr_version }}..."
        
        if [ ! -f "CHANGELOG.md" ]; then
          echo "‚ùå ERROR: CHANGELOG.md required for version bumps"
          exit 1
        fi
        
        PR_VERSION="${{ steps.version-check.outputs.pr_version }}"
        
        # Check for new version entry
        if ! grep -q "## \[${PR_VERSION}\]" CHANGELOG.md; then
          echo "‚ùå ERROR: Missing changelog entry for version $PR_VERSION"
          exit 1
        fi
        
        echo "‚úÖ Changelog validation passed"

  integration-validation:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [tests, framework-validation]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Initialize environment
      run: |
        git submodule update --init --recursive
        chmod +x tests/run-tests.sh
        chmod +x tests/bats-core/bin/bats
        chmod +x scripts/version.sh
    
    - name: Run full test suite
      run: |
        echo "Running complete test suite..."
        cd tests
        ./run-tests.sh --verbose --tap
    
    - name: Test framework installation
      run: |
        echo "Testing framework installation..."
        export HOME="/tmp/test-home"
        mkdir -p "$HOME/.claude"
        
        ./scripts/install.sh
        
        # Installation includes validation, no need to run separately
        echo "‚úÖ Installation completed successfully"

  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    needs: tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup environment
      run: |
        git submodule update --init --recursive
        chmod +x tests/run-tests.sh
        chmod +x tests/bats-core/bin/bats
        chmod +x scripts/version.sh
    
    - name: Run cross-platform tests
      run: |
        echo "Running tests on ${{ matrix.os }}..."
        cd tests
        ./run-tests.sh --tap
    
    - name: Test installation on ${{ matrix.os }}
      run: |
        echo "Testing installation on ${{ matrix.os }}..."
        export HOME="/tmp/test-home-${{ runner.os }}"
        mkdir -p "$HOME/.claude"
        ./scripts/install.sh
        echo "‚úÖ Installation completed on ${{ matrix.os }}"
    
    - name: Platform validation
      run: |
        echo "Platform: ${{ runner.os }}"
        echo "Shell: $SHELL"
        bash --version
        git --version
name: BATS Test Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'framework/**'
      - 'scripts/**' 
      - 'tests/**'
      - '.github/workflows/bats-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'framework/**'
      - 'scripts/**'
      - 'tests/**'
      - '.github/workflows/bats-tests.yml'

jobs:
  bats-tests:
    name: BATS Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite:
          - version_utilities
          - framework_integration
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Setup test environment
      run: |
        echo "Setting up test environment..."
        echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        echo "PROJECT_ROOT=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        
        # Ensure submodules are properly initialized
        git submodule update --init --recursive
        
        # Make scripts executable
        chmod +x tests/run_tests.sh
        chmod +x tests/bats-core/bin/bats
        chmod +x scripts/version.sh
        chmod +x framework/validate-framework.sh
    
    - name: Validate framework structure
      run: |
        echo "Validating framework structure..."
        ./framework/validate-framework.sh
    
    - name: Run BATS test suite
      run: |
        echo "Running BATS test suite: ${{ matrix.test-suite }}"
        cd tests
        ./run_tests.sh --verbose --tap --filter "${{ matrix.test-suite }}"
    
    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results for ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Runner**: Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY

  integration-tests:
    name: Full Integration Tests
    runs-on: ubuntu-latest
    needs: bats-tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Initialize submodules
      run: |
        git submodule update --init --recursive
        chmod +x tests/run_tests.sh
        chmod +x tests/bats-core/bin/bats
        chmod +x scripts/version.sh
        chmod +x framework/validate-framework.sh
    
    - name: Run full test suite
      run: |
        echo "Running complete BATS test suite..."
        cd tests
        ./run_tests.sh --verbose --tap
    
    - name: Test framework installation
      run: |
        echo "Testing framework installation..."
        # Create temporary home for installation test
        export HOME="/tmp/test-home"
        mkdir -p "$HOME/.claude"
        
        # Run installation
        ./scripts/install.sh
        
        # Validate installation
        cd "$HOME/.claude"
        ./validate-framework.sh
    
    - name: Test legacy compatibility
      run: |
        echo "Running legacy test compatibility..."
        if [ -f tests/integration.sh ]; then
          chmod +x tests/integration.sh
          ./tests/integration.sh
        fi
        
        if [ -f tests/version.sh ]; then
          chmod +x tests/version.sh  
          ./tests/version.sh
        fi
    
    - name: Generate final report
      if: always()
      run: |
        echo "## Integration Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Full Test Suite**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Framework Installation**: Tested" >> $GITHUB_STEP_SUMMARY
        echo "**Legacy Compatibility**: Validated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Version utilities" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Framework integration" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Installation process" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Legacy compatibility" >> $GITHUB_STEP_SUMMARY

  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    needs: bats-tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup environment
      run: |
        git submodule update --init --recursive
        chmod +x tests/run_tests.sh
        chmod +x tests/bats-core/bin/bats
        chmod +x scripts/version.sh
        chmod +x framework/validate-framework.sh
    
    - name: Run cross-platform tests
      run: |
        echo "Running tests on ${{ matrix.os }}..."
        cd tests
        ./run_tests.sh --tap
    
    - name: Test installation on ${{ matrix.os }}
      run: |
        echo "Testing installation on ${{ matrix.os }}..."
        export HOME="/tmp/test-home-${{ runner.os }}"
        mkdir -p "$HOME/.claude"
        ./scripts/install.sh
        cd "$HOME/.claude"
        ./validate-framework.sh
    
    - name: Platform-specific validation
      run: |
        echo "Running platform-specific validation..."
        echo "OS: ${{ runner.os }}"
        echo "Shell: $SHELL"
        
        # Test shell compatibility
        bash --version
        
        # Test git operations
        git --version
        git status
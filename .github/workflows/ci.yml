name: CI

on:
  pull_request:
    branches: [main]
    paths:
      - "framework/**"
      - "scripts/**"
      - "tests/**"
      - ".github/workflows/**"
  push:
    branches: [main]
    paths:
      - "framework/**"
      - "scripts/**"
      - "tests/**"
      - ".github/workflows/**"

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Shared environment variables
  PROJECT_ROOT: ${{ github.workspace }}
  GITHUB_WORKSPACE: ${{ github.workspace }}

jobs:
  tests:
    name: Tests (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Cache test dependencies
        uses: actions/cache@v4
        with:
          path: |
            tests/bats-core
          key: bats-${{ hashFiles('**/.gitmodules') }}
          restore-keys: |
            bats-

      - name: Setup test environment
        run: |
          echo "Setting up test environment for ${{ matrix.test-type }} tests..."

          # Ensure submodules are properly initialized
          git submodule update --init --recursive

          # Make scripts executable
          chmod +x tests/run-tests.sh
          chmod +x tests/bats-core/bin/bats
          chmod +x scripts/version.sh
          chmod +x scripts/check-version-changes.sh
          chmod +x scripts/check-version-requirements.sh
          chmod +x framework/validate-framework.sh

      - name: Run ${{ matrix.test-type }} tests
        id: test-execution
        run: |
          echo "Running ${{ matrix.test-type }} test suite..."
          cd tests
          ./run-tests.sh --verbose --tap --${{ matrix.test-type }}

      - name: Generate test summary
        if: always()
        run: |
          echo "## ${{ matrix.test-type }} Test Results" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.test-execution.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Type**: ${{ matrix.test-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Runner**: Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY

  # Single framework validation job
  framework-validation:
    name: Framework Validation
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate framework structure
        run: |
          echo "🔍 Validating framework structure..."
          chmod +x framework/validate-framework.sh
          ./framework/validate-framework.sh

      - name: Verify installation scripts
        run: |
          echo "📋 Verifying installation scripts..."

          # Check script existence and permissions
          for script in install.sh uninstall.sh; do
            if [ -f "scripts/$script" ]; then
              echo "✅ scripts/$script exists"
            else
              echo "❌ scripts/$script missing"
              exit 1
            fi

            if [ -x "scripts/$script" ]; then
              echo "✅ scripts/$script is executable"
            else
              echo "❌ scripts/$script not executable"
              exit 1
            fi
          done

          echo "✅ All installation scripts validated"

  # Version requirement enforcement - always runs on PRs to enforce version policy
  version-validation:
    name: Version Policy Enforcement
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup git references for version checking
        run: |
          # Ensure we have the main branch reference for comparison
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin main:refs/remotes/origin/main
          fi

      - name: Check version requirements
        id: version-requirements
        run: |
          echo "🔍 Checking if changes require version bump..."
          chmod +x scripts/check-version-requirements.sh
          ./scripts/check-version-requirements.sh --github-actions

      - name: Validate version and changelog
        if: steps.version-requirements.outputs.version_required == 'true'
        run: |
          echo "📋 Validating version bump and changelog..."
          chmod +x scripts/check-version-changes.sh
          ./scripts/check-version-changes.sh --github-actions

  # Single installation test per OS
  cross-platform-validation:
    name: Cross-Platform Validation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    needs: [tests, framework-validation]

    # Only run on main branch pushes or when explicitly needed for PRs
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'cross-platform'))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup environment
        run: |
          git submodule update --init --recursive
          chmod +x tests/run-tests.sh
          chmod +x tests/bats-core/bin/bats
          chmod +x scripts/version.sh

      - name: Run platform-specific tests
        run: |
          echo "Running tests on ${{ matrix.os }}..."
          cd tests
          ./run-tests.sh --tap

      - name: Test installation on ${{ matrix.os }}
        run: |
          echo "Testing installation on ${{ matrix.os }}..."
          # Create test project directory with CLAUDE.md
          TEST_PROJECT="/tmp/test-project-${{ runner.os }}"
          mkdir -p "$TEST_PROJECT"
          echo "# Test Project" > "$TEST_PROJECT/CLAUDE.md"
          cd "$TEST_PROJECT"
          ${{ github.workspace }}/scripts/install.sh
          echo "✅ Installation completed on ${{ matrix.os }}"

      - name: Validate platform compatibility
        run: |
          echo "Platform: ${{ runner.os }}"
          echo "Shell: $SHELL"
          bash --version
          git --version

  # Release readiness check - only for main branch pushes
  release-readiness:
    name: Release Readiness
    runs-on: ubuntu-latest
    needs: [tests, framework-validation, version-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Final release validation
        run: |
          echo "🚀 Performing final release readiness check..."

          # Initialize environment (consolidated setup)
          git submodule update --init --recursive
          chmod +x tests/run-tests.sh
          chmod +x tests/bats-core/bin/bats
          chmod +x scripts/version.sh
          chmod +x framework/validate-framework.sh

          echo "✅ Release readiness validation setup complete"

      - name: Test production installation
        run: |
          echo "📦 Testing production installation process..."
          # Create test project directory with CLAUDE.md
          TEST_PROJECT="/tmp/release-test-project"
          mkdir -p "$TEST_PROJECT"
          echo "# Test Project" > "$TEST_PROJECT/CLAUDE.md"
          cd "$TEST_PROJECT"

          ${{ github.workspace }}/scripts/install.sh

          cd ".claude"
          ./.csf/validate-framework.sh

          echo "✅ Production installation validated"

      - name: Generate release summary
        run: |
          echo "## Release Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Framework Version**: $(cat framework/VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "**Test Suite**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "**Framework Validation**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "**Version Validation**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "**Installation Test**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for Release**: ✅ YES" >> $GITHUB_STEP_SUMMARY
